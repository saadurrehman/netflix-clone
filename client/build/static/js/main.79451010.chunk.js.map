{"version":3,"sources":["utils/request.js","axios.js","component/Row.jsx","component/Banner.jsx","App.js","serviceWorker.js","index.js"],"names":["apiKey","request","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","thumbnail","React","useState","movies","setMovies","useEffect","a","http","get","responseObject","data","results","getMovies","console","table","className","map","movie","key","id","src","backdrop_path","poster_path","alt","name","Banner","str","n","setMovie","requests","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79451010.chunk.js","sourcesContent":["const apiKey = \"f7bc2d72803c92bc8f40b6fe5118aa99\";\r\nconst request = {\r\n  fetchTrending: `/trending/all/week?api_key=${apiKey}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${apiKey}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${apiKey}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${apiKey}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${apiKey}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${apiKey}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${apiKey}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${apiKey}&with_genres=99`,\r\n};\r\n\r\nexport default request;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React from \"react\";\r\nimport http from \"../axios\";\r\nimport \"./css/Row.css\";\r\n\r\nconst Row = ({ title, fetchUrl, thumbnail = false }) => {\r\n  const [movies, setMovies] = React.useState([]);\r\n  const baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  React.useEffect(() => {\r\n    async function getMovies() {\r\n      try {\r\n        const responseObject = await http.get(`${fetchUrl}`);\r\n        setMovies(responseObject?.data?.results || []);\r\n      } catch (err) {}\r\n    }\r\n    getMovies();\r\n  }, [fetchUrl]);\r\n\r\n  console.table(movies);\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row__poster ${thumbnail && \" poster__thumbnail \"} `}\r\n            src={`${baseUrl}${\r\n              thumbnail ? movie.backdrop_path : movie.poster_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport http from \"../axios\";\r\nimport requests from \"../utils/request\";\r\nimport \"./css/Banner.css\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await http.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request?.data?.results[\r\n          Math.floor(Math.random() * request.data.results.length)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <header\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n      className=\"banner\"\r\n    >\r\n      <div className=\"banner__content\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name || \"No Movie\"}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n\r\n          <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview, 150)}\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\nimport request from \"./utils/request\";\r\nimport \"./App.css\";\r\nimport Row from \"./component/Row\";\r\nimport Banner from \"./component/Banner\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      {/* Navbar */}\r\n      <Banner />\r\n      <Row title=\"Netflix originals\" fetchUrl={request.fetchNetflixOriginals} />\r\n      <Row title=\"Trending Now\" thumbnail fetchUrl={request.fetchTrending} />\r\n      <Row title=\"Top Rated\" thumbnail fetchUrl={request.fetchTopRated} />\r\n      <Row\r\n        title=\"Action Movies\"\r\n        thumbnail\r\n        fetchUrl={request.fetchActionMovies}\r\n      />\r\n      <Row\r\n        title=\"Comedy Movies\"\r\n        thumbnail\r\n        fetchUrl={request.fetchComedyMovies}\r\n      />\r\n      <Row\r\n        title=\"Romance Movies\"\r\n        thumbnail\r\n        fetchUrl={request.fetchRomanceMovies}\r\n      />\r\n      <Row\r\n        title=\"Documentaries\"\r\n        thumbnail\r\n        fetchUrl={request.fetchDocumentaries}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}